#!/bin/bash
PROGNAME=$(basename "$0")

### Configurable parameters
# output location
LOG_PATH='/var/data'

# number of workers = max cpu cores
WORKERS=`grep -c ^processor /proc/cpuinfo`

# range of replay
FIRST_BLOCK=0
LAST_BLOCK=41000000

DATABASE_FILE="/var/data/substate_metrics.db"

### Functions
Help()
{
	echo "${PROGNAME}: run Fantom's off-the-chain analysis "
	echo "Syntax: run_experiemnt <command> <metrics>"
	echo "  command"
	echo "     replay  replay substates and generate metrics data in a log file."
	echo "     extract extract data from a log file and store in a database."
	echo "     plot    plot graphs for speficied metrics."
	echo "     all     perform replay, extract and plot."
	echo "  metrics"
	echo "     storage-update get storage update size after each substate"
	echo "     code-size      get code size of smart contracts"
	echo "     evm-call       get runtime of evm calls"
	echo "     evm-opcode     get statistics of evm opcodes"
}

HandleError() {
	if [ "$1" -ne 0 ]
	then
		echo "${PROGNAME}: failed executing $2 for metric $3"
		exit 1
	fi
}

Run() {
	COMMAND=$1
	METRIC=$2
	LOG_FILE="${LOG_PATH}/${METRIC}.log"
	if [ "$COMMAND" = "record" ] || { [ "$COMMAND" = "all" ] && [ ${METRIC} = "evm-call" ]; }; then
		echo "${PROGNAME}: Record substates for ${METRIC} via 'opera import'"
	fi
	if [ "$COMMAND" = "replay" ] || [ "$COMMAND" = "all" ]; then
		echo "${PROGNAME}: Replay substates for ${METRIC} from block ${FIRST_BLOCK} to block ${LAST_BLOCK} using ${WORKERS} threads."
		echo "${PROGNAME}: Write output to ${LOG_FILE}."
		if [ "$METRIC" = "storage-update" ]; then
			../build/substate-cli storage-size --workers ${WORKERS} --substatedir ../substate.fantom ${FIRST_BLOCK} ${LAST_BLOCK} > ${LOG_FILE}
			HandleError $? "replay command" ${METRIC}
		elif [ "$METRIC" = "code-size" ]; then
			../build/substate-cli code-size --workers ${WORKERS} --substatedir ../substate.fantom ${FIRST_BLOCK} ${LAST_BLOCK} > ${LOG_FILE}
			HandleError $? "replay command" ${METRIC}
		elif [ "$METRIC" = "evm-call" ]; then
			../build/substate-cli code-size --workers ${WORKERS} --substatedir ../substate.fantom ${FIRST_BLOCK} ${LAST_BLOCK} > ${LOG_FILE}
			HandleError $? "replay command" ${METRIC}
		fi
	fi
	if [ "$COMMAND" = "extract" ] || [ "$COMMAND" = "all" ]; then
		echo "${PROGNAME}: Extract ${METRIC} data from ${LOG_FILE}."
		if [ "$METRIC" = "storage-update" ]; then
			DATABASE=${DATABASE_FILE} ./create_storage_table ${LOG_FILE}
			HandleError $? "extract command" ${METRIC}
		elif [ "$METRIC" = "code-size" ]; then
			DATABASE=${DATABASE_FILE} ./create_code_size_table ${LOG_FILE}
			HandleError $? "extract command" ${METRIC}
		elif [ "$METRIC" = "evm-call" ]; then
			DATABASE=${DATABASE_FILE} ./create_runtime_table ${LOG_FILE}
			HandleError $? "extract command" ${METRIC}
		fi

	fi
	if [ "$COMMAND" = "plot" ] || [ "$COMMAND" = "all" ]; then
		echo "${PROGNAME}: Plot graphs from ${METRIC} data."
		if [ "$METRIC" = "storage-update" ]; then
			DATABASE=${DATABASE_FILE} ./plot_storage_graphs
			HandleError $? "plot command" ${METRIC}
		elif [ "$METRIC" = "code-size" ]; then
			DATABASE=${DATABASE_FILE} ./plot_code_size_graphs
			HandleError $? "extract command" ${METRIC}
		elif [ "$METRIC" = "evm-call" ]; then
			DATABASE=${DATABASE_FILE} ./plot_runtime_graphs
			HandleError $? "extract command" ${METRIC}
		fi
	fi
}

### Main
# Check number of arguments. Must have at least 2 arguments
if [ "$#" -lt 2 ]; then
    Help
    exit 1
fi

case "$1" in
	"replay"|"extract"|"plot"|"all"|"record")
		COMMAND=$1 #executable command
		;;
	*)
		echo "Unknown command $1"
		Help
		exit 1
		;;
esac

for i in "${@:2}"
do
	echo "Run ${PROGNAME} with arguments ${COMMAND} ${i}"
	if [ "$COMMAND" == "recorded" ]; then
		case $i in
			"evm-call")
				Run $COMMAND $i
				;;
			*)
				echo "Unknown metric for record command: ${i}"
				Help
				exit 1
				;;
		esac
	else
		case $i in
			"storage-update"|"code-size"|"evm-call"|"evm-opcode")
				Run $COMMAND $i
				;;
			*)
				echo "Unknown metric: ${i}"
				Help
				exit 1
				;;
		esac
	fi
done
